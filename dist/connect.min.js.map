{
  "version": 3,
  "sources": ["../src/index.js"],
  "sourcesContent": ["const apiUrl = \"https://api.passwordless.id\"\r\n//const apiUrl = \"http://localhost:8787\"\r\n\r\n\r\n\r\nexport async function auth(options) {\r\n    const args = new URLSearchParams({\r\n        scope: options.scope ?? 'openid',\r\n        response_type: options.response_type ?? 'id_token',\r\n        client_id: window.location.origin,\r\n        redirect_uri: options.response_type ?? window.location.href,\r\n        nonce: options.nonce,\r\n        state: options.state\r\n    })\r\n    window.location.assign(`${apiUrl}/openid/authorize?${args}`)\r\n}\r\n\r\n\r\nconst utf8decoder = new TextDecoder()\r\n\r\nexport async function request(options) {\r\n    const args = new URLSearchParams({\r\n        scope: options.scope ?? 'openid',\r\n        nonce: options.nonce\r\n    })\r\n    // The API call to fetch the user\r\n    const res = await fetch(`${apiUrl}/openid/id_token?${args}`, {\r\n        mode: 'cors',\r\n        credentials: 'include'\r\n    })\r\n\r\n    const user = {}\r\n\r\n    if (res.ok) {\r\n        const json = await res.json()\r\n        // Please note that the JWT signature is not verified in this example\r\n        // The profile is simply extracted\r\n        const payload = json.id_token.split('.')[1]\r\n        const base64 = payload.replaceAll('-', '+').replaceAll('_', '/')\r\n        const buffer = Uint8Array.from(atob(base64), c => c.charCodeAt(0))\r\n        const utf8 = utf8decoder.decode(buffer)\r\n        const profile = JSON.parse(utf8)\r\n        \r\n        delete profile['iss']\r\n        delete profile['aud']\r\n        delete profile['iat']\r\n        delete profile['exp']\r\n        \r\n        console.debug(profile)\r\n\r\n        return {\r\n            signedIn: true,\r\n            scopeGranted: true,\r\n            id_token: json.id_token,\r\n            profile,\r\n        }\r\n    } else if (res.status === 401) {\r\n        // User must first sign in (or create account)\r\n        return {\r\n            signedIn: false,\r\n            scopeGranted: false\r\n        }\r\n    } else if (res.status === 403) {\r\n        // User did not grant enough permissions (scope) \r\n        return {\r\n            signedIn: true,\r\n            scopeGranted: false\r\n        }\r\n    }\r\n    else {\r\n        throw Error(`Unexpected error: ${res.status} ${await res.text()}`)\r\n    }\r\n}\r\n\r\n\r\nexport default {\r\n    auth,\r\n    request\r\n}"],
  "mappings": "6MAAA,MAAMA,EAAS,8BAKf,gBAAsB,KAAKC,EAAS,QAAAC,EAAA,sBALpC,IAAAC,EAAAC,EAAAC,EAMI,MAAMC,EAAO,IAAI,gBAAgB,CAC7B,OAAOH,EAAAF,EAAQ,QAAR,KAAAE,EAAiB,SACxB,eAAeC,EAAAH,EAAQ,gBAAR,KAAAG,EAAyB,WACxC,UAAW,OAAO,SAAS,OAC3B,cAAcC,EAAAJ,EAAQ,gBAAR,KAAAI,EAAyB,OAAO,SAAS,KACvD,MAAOJ,EAAQ,MACf,MAAOA,EAAQ,KACnB,CAAC,EACD,OAAO,SAAS,OAAO,GAAGD,sBAA2BM,GAAM,CAC/D,GAGA,MAAMC,EAAc,IAAI,YAExB,gBAAsB,QAAQN,EAAS,QAAAC,EAAA,sBApBvC,IAAAC,EAqBI,MAAMG,EAAO,IAAI,gBAAgB,CAC7B,OAAOH,EAAAF,EAAQ,QAAR,KAAAE,EAAiB,SACxB,MAAOF,EAAQ,KACnB,CAAC,EAEKO,EAAM,MAAM,MAAM,GAAGR,qBAA0BM,IAAQ,CACzD,KAAM,OACN,YAAa,SACjB,CAAC,EAEKG,EAAO,CAAC,EAEd,GAAID,EAAI,GAAI,CACR,MAAME,EAAO,MAAMF,EAAI,KAAK,EAItBG,EADUD,EAAK,SAAS,MAAM,GAAG,EAAE,GAClB,WAAW,IAAK,GAAG,EAAE,WAAW,IAAK,GAAG,EACzDE,EAAS,WAAW,KAAK,KAAKD,CAAM,EAAGE,GAAKA,EAAE,WAAW,CAAC,CAAC,EAC3DC,EAAOP,EAAY,OAAOK,CAAM,EAChCG,EAAU,KAAK,MAAMD,CAAI,EAE/B,cAAOC,EAAQ,IACf,OAAOA,EAAQ,IACf,OAAOA,EAAQ,IACf,OAAOA,EAAQ,IAEf,QAAQ,MAAMA,CAAO,EAEd,CACH,SAAU,GACV,aAAc,GACd,SAAUL,EAAK,SACf,QAAAK,CACJ,CACJ,KAAO,IAAIP,EAAI,SAAW,IAEtB,MAAO,CACH,SAAU,GACV,aAAc,EAClB,EACG,GAAIA,EAAI,SAAW,IAEtB,MAAO,CACH,SAAU,GACV,aAAc,EAClB,EAGA,MAAM,MAAM,qBAAqBA,EAAI,UAAU,MAAMA,EAAI,KAAK,GAAG,EAEzE,GAGA,cAAe,CACX,KACA,OACJ",
  "names": ["apiUrl", "options", "__async", "_a", "_b", "_c", "args", "utf8decoder", "res", "user", "json", "base64", "buffer", "c", "utf8", "profile"]
}
